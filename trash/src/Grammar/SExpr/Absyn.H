#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class SExpr;
class SNum;
class SString;
class SAtom;
class SCons;
class ListSExpr;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitSExpr(SExpr *p) = 0;
  virtual void visitSNum(SNum *p) = 0;
  virtual void visitSString(SString *p) = 0;
  virtual void visitSAtom(SAtom *p) = 0;
  virtual void visitSCons(SCons *p) = 0;
  virtual void visitListSExpr(ListSExpr *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class SExpr : public Visitable
{
public:
  virtual SExpr *clone() const = 0;

};



class SNum : public SExpr
{
public:
  Integer integer_;

  SNum(const SNum &);
  SNum &operator=(const SNum &);
  SNum(Integer p1);
  ~SNum();
  virtual void accept(Visitor *v);
  virtual SNum *clone() const;
  void swap(SNum &);
};

class SString : public SExpr
{
public:
  String string_;

  SString(const SString &);
  SString &operator=(const SString &);
  SString(String p1);
  ~SString();
  virtual void accept(Visitor *v);
  virtual SString *clone() const;
  void swap(SString &);
};

class SAtom : public SExpr
{
public:
  Ident ident_;

  SAtom(const SAtom &);
  SAtom &operator=(const SAtom &);
  SAtom(Ident p1);
  ~SAtom();
  virtual void accept(Visitor *v);
  virtual SAtom *clone() const;
  void swap(SAtom &);
};

class SCons : public SExpr
{
public:
  ListSExpr *listsexpr_;

  SCons(const SCons &);
  SCons &operator=(const SCons &);
  SCons(ListSExpr *p1);
  ~SCons();
  virtual void accept(Visitor *v);
  virtual SCons *clone() const;
  void swap(SCons &);
};



class ListSExpr : public Visitable, public std::vector<SExpr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListSExpr *clone() const;
};



#endif
